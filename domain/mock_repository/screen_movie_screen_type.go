// Code generated by MockGen. DO NOT EDIT.
// Source: screen_movie_screen_type.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/candy12t/cinemarch-server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScreenMovieScreenType is a mock of ScreenMovieScreenType interface.
type MockScreenMovieScreenType struct {
	ctrl     *gomock.Controller
	recorder *MockScreenMovieScreenTypeMockRecorder
}

// MockScreenMovieScreenTypeMockRecorder is the mock recorder for MockScreenMovieScreenType.
type MockScreenMovieScreenTypeMockRecorder struct {
	mock *MockScreenMovieScreenType
}

// NewMockScreenMovieScreenType creates a new mock instance.
func NewMockScreenMovieScreenType(ctrl *gomock.Controller) *MockScreenMovieScreenType {
	mock := &MockScreenMovieScreenType{ctrl: ctrl}
	mock.recorder = &MockScreenMovieScreenTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreenMovieScreenType) EXPECT() *MockScreenMovieScreenTypeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScreenMovieScreenType) Create(ctx context.Context, screenMovieScreenType *entity.ScreenMovieScreenType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, screenMovieScreenType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScreenMovieScreenTypeMockRecorder) Create(ctx, screenMovieScreenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScreenMovieScreenType)(nil).Create), ctx, screenMovieScreenType)
}

// FindByID mocks base method.
func (m *MockScreenMovieScreenType) FindByID(ctx context.Context, screenMovieScreenTypeID entity.UUID) (*entity.ScreenMovieScreenType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, screenMovieScreenTypeID)
	ret0, _ := ret[0].(*entity.ScreenMovieScreenType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScreenMovieScreenTypeMockRecorder) FindByID(ctx, screenMovieScreenTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScreenMovieScreenType)(nil).FindByID), ctx, screenMovieScreenTypeID)
}

// FindByScreenMovieID mocks base method.
func (m *MockScreenMovieScreenType) FindByScreenMovieID(ctx context.Context, screenMovieID entity.UUID) (*entity.ScreenMovieScreenType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByScreenMovieID", ctx, screenMovieID)
	ret0, _ := ret[0].(*entity.ScreenMovieScreenType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByScreenMovieID indicates an expected call of FindByScreenMovieID.
func (mr *MockScreenMovieScreenTypeMockRecorder) FindByScreenMovieID(ctx, screenMovieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByScreenMovieID", reflect.TypeOf((*MockScreenMovieScreenType)(nil).FindByScreenMovieID), ctx, screenMovieID)
}

// FindByScreenTypeID mocks base method.
func (m *MockScreenMovieScreenType) FindByScreenTypeID(ctx context.Context, screenTypeID entity.UUID) (*entity.ScreenMovieScreenType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByScreenTypeID", ctx, screenTypeID)
	ret0, _ := ret[0].(*entity.ScreenMovieScreenType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByScreenTypeID indicates an expected call of FindByScreenTypeID.
func (mr *MockScreenMovieScreenTypeMockRecorder) FindByScreenTypeID(ctx, screenTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByScreenTypeID", reflect.TypeOf((*MockScreenMovieScreenType)(nil).FindByScreenTypeID), ctx, screenTypeID)
}
