// Code generated by MockGen. DO NOT EDIT.
// Source: screening_movie_screening_type.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/candy12t/cinemarch-server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScreeningMovieScreeningType is a mock of ScreeningMovieScreeningType interface.
type MockScreeningMovieScreeningType struct {
	ctrl     *gomock.Controller
	recorder *MockScreeningMovieScreeningTypeMockRecorder
}

// MockScreeningMovieScreeningTypeMockRecorder is the mock recorder for MockScreeningMovieScreeningType.
type MockScreeningMovieScreeningTypeMockRecorder struct {
	mock *MockScreeningMovieScreeningType
}

// NewMockScreeningMovieScreeningType creates a new mock instance.
func NewMockScreeningMovieScreeningType(ctrl *gomock.Controller) *MockScreeningMovieScreeningType {
	mock := &MockScreeningMovieScreeningType{ctrl: ctrl}
	mock.recorder = &MockScreeningMovieScreeningTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreeningMovieScreeningType) EXPECT() *MockScreeningMovieScreeningTypeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScreeningMovieScreeningType) Create(ctx context.Context, screeningMovieScreeningType *entity.ScreeningMovieScreeningType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, screeningMovieScreeningType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScreeningMovieScreeningTypeMockRecorder) Create(ctx, screeningMovieScreeningType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScreeningMovieScreeningType)(nil).Create), ctx, screeningMovieScreeningType)
}

// FindByID mocks base method.
func (m *MockScreeningMovieScreeningType) FindByID(ctx context.Context, screeningMovieScreeningTypeID entity.UUID) (*entity.ScreeningMovieScreeningType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, screeningMovieScreeningTypeID)
	ret0, _ := ret[0].(*entity.ScreeningMovieScreeningType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScreeningMovieScreeningTypeMockRecorder) FindByID(ctx, screeningMovieScreeningTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScreeningMovieScreeningType)(nil).FindByID), ctx, screeningMovieScreeningTypeID)
}

// FindByScreeningMovieID mocks base method.
func (m *MockScreeningMovieScreeningType) FindByScreeningMovieID(ctx context.Context, screeningMovieID entity.UUID) (*entity.ScreeningMovieScreeningType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByScreeningMovieID", ctx, screeningMovieID)
	ret0, _ := ret[0].(*entity.ScreeningMovieScreeningType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByScreeningMovieID indicates an expected call of FindByScreeningMovieID.
func (mr *MockScreeningMovieScreeningTypeMockRecorder) FindByScreeningMovieID(ctx, screeningMovieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByScreeningMovieID", reflect.TypeOf((*MockScreeningMovieScreeningType)(nil).FindByScreeningMovieID), ctx, screeningMovieID)
}

// FindByScreeningTypeID mocks base method.
func (m *MockScreeningMovieScreeningType) FindByScreeningTypeID(ctx context.Context, screeningTypeID entity.UUID) (*entity.ScreeningMovieScreeningType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByScreeningTypeID", ctx, screeningTypeID)
	ret0, _ := ret[0].(*entity.ScreeningMovieScreeningType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByScreeningTypeID indicates an expected call of FindByScreeningTypeID.
func (mr *MockScreeningMovieScreeningTypeMockRecorder) FindByScreeningTypeID(ctx, screeningTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByScreeningTypeID", reflect.TypeOf((*MockScreeningMovieScreeningType)(nil).FindByScreeningTypeID), ctx, screeningTypeID)
}
