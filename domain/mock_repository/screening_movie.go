// Code generated by MockGen. DO NOT EDIT.
// Source: screening_movie.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/candy12t/cinemarch-server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScreeningMovie is a mock of ScreeningMovie interface.
type MockScreeningMovie struct {
	ctrl     *gomock.Controller
	recorder *MockScreeningMovieMockRecorder
}

// MockScreeningMovieMockRecorder is the mock recorder for MockScreeningMovie.
type MockScreeningMovieMockRecorder struct {
	mock *MockScreeningMovie
}

// NewMockScreeningMovie creates a new mock instance.
func NewMockScreeningMovie(ctrl *gomock.Controller) *MockScreeningMovie {
	mock := &MockScreeningMovie{ctrl: ctrl}
	mock.recorder = &MockScreeningMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreeningMovie) EXPECT() *MockScreeningMovieMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScreeningMovie) Create(ctx context.Context, screeningMovie *entity.ScreeningMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, screeningMovie)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScreeningMovieMockRecorder) Create(ctx, screeningMovie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScreeningMovie)(nil).Create), ctx, screeningMovie)
}

// FindByID mocks base method.
func (m *MockScreeningMovie) FindByID(ctx context.Context, screeningMovieID entity.UUID) (*entity.ScreeningMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, screeningMovieID)
	ret0, _ := ret[0].(*entity.ScreeningMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScreeningMovieMockRecorder) FindByID(ctx, screeningMovieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScreeningMovie)(nil).FindByID), ctx, screeningMovieID)
}
