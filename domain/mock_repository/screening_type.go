// Code generated by MockGen. DO NOT EDIT.
// Source: screening_type.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/candy12t/cinemarch-server/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScreeningType is a mock of ScreeningType interface.
type MockScreeningType struct {
	ctrl     *gomock.Controller
	recorder *MockScreeningTypeMockRecorder
}

// MockScreeningTypeMockRecorder is the mock recorder for MockScreeningType.
type MockScreeningTypeMockRecorder struct {
	mock *MockScreeningType
}

// NewMockScreeningType creates a new mock instance.
func NewMockScreeningType(ctrl *gomock.Controller) *MockScreeningType {
	mock := &MockScreeningType{ctrl: ctrl}
	mock.recorder = &MockScreeningTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScreeningType) EXPECT() *MockScreeningTypeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScreeningType) Create(ctx context.Context, screeningType *entity.ScreeningType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, screeningType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScreeningTypeMockRecorder) Create(ctx, screeningType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScreeningType)(nil).Create), ctx, screeningType)
}

// FindByID mocks base method.
func (m *MockScreeningType) FindByID(ctx context.Context, screeningTypeID entity.UUID) (*entity.ScreeningType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, screeningTypeID)
	ret0, _ := ret[0].(*entity.ScreeningType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScreeningTypeMockRecorder) FindByID(ctx, screeningTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScreeningType)(nil).FindByID), ctx, screeningTypeID)
}
